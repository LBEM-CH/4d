#!/bin/tcsh -fe
####
#
#############################################################################
#                                                                           #
# Title: Devel Import Movie from SerialEM                                         #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 03/21/2011                                             #
# Last Modification: 03/21/2011                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# SORTORDER: 11
#
# MANUAL: <B>Welcome to the File Importer</B>
#
# DISPLAY: imagename_original
# DISPLAY: imagenumber
# DISPLAY: tempkeep
# DISPLAY: comment
# DISPLAY: crop_histogram
# DISPLAY: crop_histogram_stdev
# DISPLAY: import_rawstack
# DISPLAY: import_rawstack_original
# DISPLAY: import_rawstack_type
# DISPLAY: import_gainref
# DISPLAY: import_gainref_original
# DISPLAY: import_defects
# DISPLAY: import_defects_original
# DISPLAY: raw_gaincorrectedstack
# DISPLAY: magnification
# DISPLAY: stepdigitizer
# DISPLAY: Calc_from_sample_pixel
# DISPLAY: sample_pixel
# DISPLAY: take_header_orig_sample_pixel
# DISPLAY: orig_sample_pixel
# DISPLAY: movie_imagenumber_total
# DISPLAY: import_bin
# DISPLAY: import_bin_target
# DISPLAY: SERIALEM_FACTOR
# DISPLAY: SERIALEM_DEFAULT_FACTOR
# DISPLAY: movie_image_dose_source
# DISPLAY: movie_image_dose_factor
# DISPLAY: movie_image_dose_manually
# DISPLAY: frame_measured_image_dose
# DISPLAY: frame_image_dose
# DISPLAY: frame_dose
# DISPLAY: total_dose
# DISPLAY: CS
# DISPLAY: KV
# DISPLAY: Thread_Number
# DISPLAY: multi_series_number_first
# DISPLAY: multi_series_number_last
#
#$end_local_vars
#
# Static directory variables at disposition are:
# appDir_2dx
# scripts-standard_2dx
# scripts-custom_2dx
#
set bin_2dx = ""
set proc_2dx = ""
set app_2dx_mrc_converter = ""
#
# Variables to be available from the config file are:
set tempkeep = ""
set imagename = ""
set nonmaskimagename = ""
set crop_histogram = ""
set crop_histogram_stdev = ""
set movie_stackname = ""
set import_rawstack = ""
set import_rawstack_type = ""
set import_gainref = ""
set import_gainref_original = ""
set import_defects = ""
set import_defects_original = ""
set raw_gaincorrectedstack = ""
set magnification = ""
set stepdigitizer = ""
set Calc_from_sample_pixel = ""
set sample_pixel = ""
set take_header_orig_sample_pixel = ""
set orig_sample_pixel = ""
set movie_imagenumber_total = ""
set import_bin = ""
set import_bin_target = ""
set import_rawstack_original = ""
set SERIALEM_FACTOR = ""
set SERIALEM_DEFAULT_FACTOR = ""
set import_original_time = ""
set frame_image_dose_source = ""
set frame_image_dose_factor = ""
set frame_image_dose_manually = ""
set movie_image_dose_source = ""
set movie_image_dose_factor = ""
set movie_image_dose_manually = ""
set frame_measured_image_dose = ""
set CS = ""
set KV = ""
set defocus_phase_shift_doit = ""
set Thread_Number = ""
set export_basedir = ""
set export_rawstack_subdir = ""
set multi_series_number_first = ""
set multi_series_number_last = ""
#
#$end_vars
#
#
#
#
#
set scriptname = focpair_import_serialem
\rm -f LOGS/${scriptname}.results
#
source ${proc_2dx}/initialize
#
source ${proc_2dx}/2dx_makedirs
#
set import_produce_gainref2D = "y"
set import_produce_gainref2Dfft = "y"
#
setenv OMP_NUM_THREADS ${Thread_Number}
#
if ( ${website_blur_doit} == "y" ) then
  set blurkernel = ${website_blurkernel}
else
  set blurkernel = 0
endif
#
set namestub = `echo ${import_rawstack} | sed -e 's/\.mrc//g' -e 's/\.tif//g' | sed -e 's/\./_/g' -e 's/\,/_/g' -e 's/ /_/g' -e's/:/_/g' -e's/#/_/g'`
if ( ${import_rawstack_type} == "1" ) then
  set raw_gaincorrectedstack = ${namestub}_raw
endif
#
if ( ! -e ${raw_gaincorrectedstack}.mrc ) then
  \ln -s ${raw_gaincorrectedstack}_${multi_series_number_last}.mrc ${raw_gaincorrectedstack}.mrc
  \ln -s ${raw_gaincorrectedstack}_${multi_series_number_last}_fft.mrc ${raw_gaincorrectedstack}_fft.mrc
endif
#
echo "<<@progress: 10>>"
#
if ( ${CS} == "ScriptWillPutNumberHere" ) then
  set CS = ${Default_CS}
  echo "set CS = ${CS}" >> LOGS/${scriptname}.results
endif
#
if ( ${KV} == "ScriptWillPutNumberHere" ) then
  set KV = ${Default_KV}
  echo "set KV = ${KV}" >> LOGS/${scriptname}.results
endif
#
if ( ${defocus_phase_shift_doit} == "-" ) then
  set defocus_phase_shift_doit = ${Default_phase_shift_doit}
  echo "set defocus_phase_shift_doit = ${defocus_phase_shift_doit}" >> LOGS/${scriptname}.results
endif
#
if(${import_original_time} == "-" || ${import_original_time} == "") then
  @ status_date = `date +%s` * 1000
  set date_text = "Processed at "`echo ${status_date} | awk '{ s = $1 / 1000 } END { print s }' | ${app_gawk} '{print strftime("%c", $0)}' `
  # set date_text = "Processed at "`echo ${status_date} | awk '{ s = $1 / 1000 } END { print s }' | awk 'BEGIN{m=split("Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec",d,"|") for(o=1;o<=m;o++){ months[d[o]]=sprintf("%02d",o)} format = "%m/%d/%Y %H:%M" } {split($4,time,":") date = (strftime("%Y") " " months[$2] " " $3 " " time[1] " " time[2] " 0") print strftime(format, mktime(date))}'`

else
  set status_date = ${import_original_time}
  set date_text = "Recorded at "`echo ${status_date} | awk '{ s = $1 / 1000 } END { print s }' | ${app_gawk} '{print strftime("%c", $0)}' `
  # set date_text = "Recorded at "`echo ${status_date} | awk '{ s = $1 / 1000 } END { print s }' | awk 'BEGIN{m=split("Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec",d,"|") for(o=1;o<=m;o++){ months[d[o]]=sprintf("%02d",o)} format = "%m/%d/%Y %H:%M" } {split($4,time,":") date = (strftime("%Y") " " months[$2] " " $3 " " time[1] " " time[2] " 0") print strftime(format, mktime(date))}'`
endif
#
set current_filenumber = ${multi_series_number_first}
#
while ( ${current_filenumber} <= ${multi_series_number_last} )
  #
  set import_rawstack_noextention = `echo ${import_rawstack} | rev | cut -d\. -f2- | rev`
  set current_filename = ${import_rawstack_noextention}_${current_filenumber}
  #
  if ( ${import_rawstack_type} == "1" ) then
    if ( ! -e ${current_filename}.tif ) then
      ${proc_2dx}/protest "ERROR: Raw stack ${current_filename}.tif not found."
    endif    
    if ( ! -e ${import_gainref} ) then
      if ( ${import_gainref_original}x != "x" ) then
        if ( ! -e ${import_gainref_original} ) then
          ${proc_2dx}/protest "ERROR: Gain reference ${import_gainref} not found."
        else
          ${proc_2dx}/linblock "WARNING: Gain reference missing. Copying it again here."
          \cp -f ${import_gainref_original} .
          set import_gainref = `echo ${import_gainref_original} | rev | cut -d\/ -f1 | rev `
          echo "set import_gainref = ${import_gainref}" >> LOGS/${scriptname}.results
        endif
      else
        ${proc_2dx}/protest "WARNING: Gain reference missing."
      endif
    endif
    echo "# IMAGE-IMPORTANT: ${current_filename}.tif <Raw, dark-sub. stack ${current_filenumber} (TIFF stack)>" >> LOGS/${scriptname}.results
    echo "# IMAGE-IMPORTANT: ${import_gainref} <Gain reference (2D)>" >> LOGS/${scriptname}.results
    echo "<<@evaluate>>"
    echo "::Raw movie as dark-subtracted stack present. Gain reference found."
    #
    set import_rawstack_end = `echo ${import_rawstack} | rev | cut -c1-4 | rev`
    if ( ${import_rawstack_end} == "mrcs" ) then
      set SERIALEM_FACTOR = 1.0
    else if ( ${import_rawstack_end} == ".mrc" ) then
      set SERIALEM_FACTOR = 1.0
    else if ( ${import_rawstack_end} == ".tif" ) then
      set SERIALEM_FACTOR = ${SERIALEM_DEFAULT_FACTOR}
    else
     ${proc_2dx}/protest "ERROR: file format ${import_rawstack_end} not supported."
    endif
    # 
    # set float = " "
    set float = "-m 2"
    if ( ${import_defects}x != "x" ) then
      if ( -e ${import_defects} ) then
        #################################################################################
        ${proc_2dx}/linblock "Running clip unpack ${float} -D ${import_defects} ${current_filename}.tif ${import_gainref} FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs"
        #################################################################################
        #
        \rm -f FASTDISK/${current_filename}.mrcs
        time nice ${dir_imod}/bin/clip unpack ${float} -D ${import_defects} ${current_filename}.tif ${import_gainref} FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs
      else
        #################################################################################
        ${proc_2dx}/linblock "Running clip unpack ${float} ${import_rawstack} ${import_gainref} FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs"
        #################################################################################
        #
        ${proc_2dx}/linblock "WARNING: defects list file not found."
       \rm -f FASTDISK/${raw_gaincorrectedstack}.mrcs
        time nice ${dir_imod}/bin/clip unpack ${float} ${current_filename}.tif ${import_gainref} FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs
      endif
    else
      #################################################################################
      ${proc_2dx}/linblock "Running clip unpack ${float} ${current_filename}.tif ${import_gainref} FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs"
      #################################################################################
      # 
      ${proc_2dx}/linblock "WARNING: defects list file not found."
      \rm -f FASTDISK/${raw_gaincorrectedstack}.mrcs
      time nice ${dir_imod}/bin/clip unpack ${float} ${current_filename}.tif ${import_gainref} FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs
    endif
    #
  endif
  #
  echo "<<@progress: 20>>"
  #
  if ( ${import_rawstack_type} == "2" ) then
    ${proc_2dx}/protest "ERROR: Type 2 not implemented."
  endif
  echo "set raw_gaincorrectedstack = ${raw_gaincorrectedstack}"  >> LOGS/${scriptname}.results
  echo "# IMAGE-IMPORTANT: FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs <Gain-corrected stack (stack)>" >> LOGS/${scriptname}.results
  #
  if ( ${take_header_orig_sample_pixel} == "y" ) then
  # Here we read the header to get the original pixel size, and set sample_pixel for the first time.
	if ( ${import_rawstack_type} == "1" || ${import_rawstack_type} == "2" ) then
	  echo "::Gain-corrected stack is ${raw_gaincorrectedstack}_${current_filenumber}.mrcs"
	  #
	  set sample_pixel = `${dir_imod}/bin/clip info FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs | grep Scale | cut -d\( -f2 | cut -dx -f1`
	  #
	  set movie_imagenumber_total = `${dir_imod}/bin/clip info FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs | grep "Image size"  | cut -d\, -f3 | cut -d\) -f1`
	  echo "set movie_imagenumber_total = ${movie_imagenumber_total}" >> LOGS/${scriptname}.results
	  #
	else
	  #
	  set SERIALEM_FACTOR = ${SERIALEM_DEFAULT_FACTOR}
	  set sample_pixel = `${dir_imod}/bin/clip info FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs | grep Scale | cut -d\( -f2 | cut -dx -f1`
	  #
	endif
	set orig_sample_pixel = ${sample_pixel}
  else
        # Or, the user provides the orig_sample_pixel and this becomes our initial sample_pixel.
	set sample_pixel = ${orig_sample_pixel}
  endif
  #
  if ( ${Calc_from_sample_pixel} == "y" ) then
    set magnification = `echo "scale=3; ${stepdigitizer} * 10000 / ${sample_pixel}" | bc ` 
    echo "set magnification = ${magnification}"  >> LOGS/${scriptname}.results
  endif
  #
  if ( ${import_bin} != "0" && ${import_bin} != "1" ) then
    set width = `${dir_imod}/bin/clip info FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs | grep size | head -n 1 | cut -d\( -f2 | cut -d\, -f1`
    set height = `${dir_imod}/bin/clip info FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs | grep size | head -n 1 | cut -d\( -f2 | cut -d\, -f2`
    set widthbig = `echo ${width} 4096 | awk '{ if ( $1 > $2 ) { s = 1 } else { s = 0 } } END { print s } '`
    if ( ${widthbig} == "1" ) then
      if ( ${import_bin} == "2" ) then
        set xdim = `echo ${width}  | awk '{ s = int($1 / 2) } END { print s }'`
        set ydim = `echo ${height} | awk '{ s = int($1 / 2) } END { print s }'`
        echo ":: Image has size ${width},${height}, which is too large. Fourier-cropping it to ${xdim},${ydim}."
        set sample_pixel = `echo ${sample_pixel} | awk '{ s = 2 * $1 } END { print s }'`
        echo "::SERIALEM_FACTOR is reduced by 4, to account for 2x2 Fourier cropping effect on mean dose per pixel."
        set SERIALEM_FACTOR = `echo ${SERIALEM_FACTOR} | awk '{ s = $1 / 4.0 } END { print s }'`
        #
        #################################################################################
        ${proc_2dx}/linblock "Running: resample_mp.exe"
        #################################################################################
        #
        \mv -f FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}_large.mrcs
        echo "# IMAGE: FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}_large.mrcs <Gain-corrected stack non-binned ${current_filenumber} (stack)>" >> LOGS/${scriptname}.results
        \rm -f dummy.mrc
        \ln -s FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}_large.mrcs dummy.mrc
        time nice +19 ${dir_frealign}/bin/resample_mp.exe << eot
dummy.mrc
FASTDISK/dummyout.mrc
no
no
${xdim}
${ydim}
eot
        if ( -e FASTDISK/dummyout.mrc ) then
          \mv -f FASTDISK/dummyout.mrc FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs
        else
          ${proc_2dx}/protest "ERROR occured in frealign resample_mp.exe"
        endif
        \rm -f dummy.mrc
        #
      endif
      if ( ${import_bin} == "3" ) then
        ${proc_2dx}/protest "Not yet implemented."
      endif
      if ( ${import_bin} == "4" ) then
        ${proc_2dx}/protest "Not yet implemented."
      endif
      if ( ${import_bin} == "5" ) then
        ${proc_2dx}/protest "Not yet implemented."
      endif
    else
      echo ":: Image has size ${width}, which is small enough, no binning done."
    endif
    #
  endif 
  #
  echo "<<@progress: 30>>" 
  #
  set frame_image_dose_source = ${movie_image_dose_source}
  set frame_image_dose_factor = ${movie_image_dose_factor}
  # echo ${movie_image_dose_source} ${frame_image_dose_source}
  echo "set sample_pixel = ${sample_pixel}"  >> LOGS/${scriptname}.results
  if ( -e FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}_large.mrcs ) then
    source ${proc_2dx}/2dx_calc_framedose_sub.com FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}_large.mrcs ${sample_pixel} ${SERIALEM_FACTOR}
  else
    source ${proc_2dx}/2dx_calc_framedose_sub.com FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs       ${sample_pixel} ${SERIALEM_FACTOR}
  endif
  echo "set frame_measured_image_dose = ${frame_measured_image_dose}" >> LOGS/${scriptname}.results
  echo "set frame_image_dose = ${frame_image_dose}" >> LOGS/${scriptname}.results
  echo "set frame_image_counts = ${frame_image_counts}" >> LOGS/${scriptname}.results
  echo "set frame_dose = ${frame_dose}" >> LOGS/${scriptname}.results
  echo "set total_dose = ${total_dose}" >> LOGS/${scriptname}.results
  #
  if ( ${tempkeep} == "n" ) then
    \rm -f FASTDISK/${raw_gaincorrectedstack}_large.mrcs
  endif
  #
  if ( ${import_produce_gainref2D} == "y" ) then
    #################################################################################
    ${proc_2dx}/linblock "Running: avgstack on ${raw_gaincorrectedstack}_${current_filenumber}.mrcs"
    #################################################################################
    #
    ${dir_imod}/bin/avgstack << eot
FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs
${raw_gaincorrectedstack}_${current_filenumber}.mrc
/
eot
    echo "# IMAGE-IMPORTANT: ${raw_gaincorrectedstack}_${current_filenumber}.mrc <Gain-corrected average image ${current_filenumber} (2D)>" >> LOGS/${scriptname}.results
  endif
  #
  echo "<<@progress: 50>>"
  echo "<<@evaluate>>"  
  #
  if ( ${crop_histogram} == "y" ) then
    set val_avg = `${dir_imod}/bin/clip stats ${raw_gaincorrectedstack}_${current_filenumber}.mrc | head -n 3 | tail -n 1 | cut -d\)  -f3 | awk '{print $1}'`
    set val_stddev = `${dir_imod}/bin/clip stats ${raw_gaincorrectedstack}_${current_filenumber}.mrc | head -n 3 | tail -n 1 | cut -d\)  -f3 | awk '{print $2}'`
    set newmin = `echo "scale=6; ${val_avg} - ${val_stddev} * ${crop_histogram_stdev}" | bc ` 
    set newmax = `echo "scale=6; ${val_avg} + ${val_stddev} * ${crop_histogram_stdev}" | bc ` 
    echo ":Statistics on 2D images are:  Average = ${val_avg}, StdDev = ${val_stddev}"
    #################################################################################
    ${proc_2dx}/linblock "Truncating histogram of 2D average to ${newmin} ... ${newmax}"
    #################################################################################
    #
    time nice +19 ${dir_imod}/bin/clip truncate -l ${newmin} -h ${newmax} ${raw_gaincorrectedstack}_${current_filenumber}.mrc ${raw_gaincorrectedstack}_${current_filenumber}_trunc.mrc
    \mv -f ${raw_gaincorrectedstack}_${current_filenumber}_trunc.mrc ${raw_gaincorrectedstack}_${current_filenumber}.mrc
  endif
  #
  \rm -f tmp.png
  \rm -f tmp2.png
  \rm -f STATUS/1-image.jpg
  ${app_2dx_mrc_converter} --size 400 ${raw_gaincorrectedstack}_${current_filenumber}.mrc tmp.png 
  ${app_python} ${proc_2dx}/PNGannotator.py tmp.png tmp2.png 10 350 0 "Raw average"
  ${app_python} ${proc_2dx}/PNGannotator.py tmp2.png ${raw_gaincorrectedstack}_${current_filenumber}.mrc.png 10 365 0 "${date_text}"
  if ( ${blurkernel} != "0" ) then
    ${app_python} ${proc_2dx}/PNGannotator.py tmp.png tmp2.png 135 180 ${blurkernel} "I N T E N T I O N A L L Y"
    ${app_python} ${proc_2dx}/PNGannotator.py tmp2.png tmp.png 135 195 0             "   B  L  U  R  R  E  D"
  endif
  ${app_python} ${proc_2dx}/PNGannotator.py tmp.png tmp2.png 10 350 0 "Raw average"
  ${app_python} ${proc_2dx}/PNGannotator.py tmp2.png STATUS/1-image.jpg 10 365 0 "${date_text}"
  \rm -f tmp.png 
  \rm -f tmp2.png
  #
  ##########################################################################
  ${proc_2dx}/linblock "Copying raw mrcs file..."
  ##########################################################################
  cp FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}.mrcs ./
  #
  if ( ${import_produce_gainref2D} == "y" && ${import_produce_gainref2Dfft} == "y" ) then
    #################################################################################
    ${proc_2dx}/linblock "Running: labelh.exe to normalize MRC image"
    #################################################################################
    # 
    echo "<<@progress: 45>>"
    #
    \rm -f FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}_norm.mrc
    #
    time ${bin_2dx}/labelh.exe << eot
${raw_gaincorrectedstack}_${current_filenumber}.mrc
42
FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}_norm.mrc
eot
    ${proc_2dx}/linblock "Running: clip fft FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}_norm.mrc ${raw_gaincorrectedstack}_${current_filenumber}_fft.mrc"
    time nice +19 ${dir_imod}/bin/clip fft FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}_norm.mrc ${raw_gaincorrectedstack}_${current_filenumber}_fft.mrc
    echo "# IMAGE-IMPORTANT: ${raw_gaincorrectedstack}_${current_filenumber}_fft.mrc <Gain-corrected average image FFT ${current_filenumber} (2D)>" >> LOGS/${scriptname}.results
    \rm -f FASTDISK/${raw_gaincorrectedstack}_${current_filenumber}_norm.mrc
    \rm -f tmp.png
    \rm -f tmp2.png
    \rm -f STATUS/1-FFT.jpg
    ${app_2dx_mrc_converter} --size 400 ${raw_gaincorrectedstack}_${current_filenumber}_fft.mrc tmp.png
    ${app_python} ${proc_2dx}/PNGannotator.py tmp.png tmp2.png 10 350 0 "FFT of raw average"
    ${app_python} ${proc_2dx}/PNGannotator.py tmp2.png ${raw_gaincorrectedstack}_${current_filenumber}_fft.mrc.png 10 365 0 "${date_text}"
    ${app_python} ${proc_2dx}/PNGannotator.py tmp2.png STATUS/1-FFT.jpg 10 365 0 "${date_text}"
    \rm -f tmp.png
    \rm -f tmp2.png
  endif
  #
  @ current_filenumber += 1
  #
end
#
echo "set SERIALEM_FACTOR = ${SERIALEM_FACTOR}"  >> LOGS/${scriptname}.results
#
##########################################################################
${proc_2dx}/linblock "${scriptname} - normal end."
##########################################################################
#
echo "<<@progress: 100>>"
echo "<<@evaluate>>"
#
exit
#
