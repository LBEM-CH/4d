#!/bin/tcsh -ef
####
#
#############################################################################
#                                                                           #
# Title: Align to Reference                                                 #
#                                                                           #
# (C) 2dx.org, GNU Plublic License.                                         #
#                                                                           #
# Created..........: 01/03/2007                                             #
# Last Modification: 01/03/2007                                             #
# Author...........: 2dx.org                                                #
#                                                                           #
#############################################################################
#
# SORTORDER: 38
#
# MANUAL: This script allows refining the phase origins of the selected images.
# 
# MANUAL: This does one single alignment step of the selected images against the available reference.
#
# PUBLICATION: 3D reconstruction of two-dimensional crystals: <A HREF="http://www.ncbi.nlm.nih.gov/pubmed/26093179">Arch Biochem Biophys 581, 68-77 (2015)</A>
# PUBLICATION: 3D Reconstruction from 2D crystal image and diffraction data: <A HREF="http://dx.doi.org/10.1016/S0076-6879(10)82004-X">Methods Enzymol. 482, Chapter 4, 101-129 (2010)</A>
# PUBLICATION: 2dx - Automated 3D structure reconstruction from 2D crystal data: <A HREF="http://journals.cambridge.org/action/displayAbstract?aid=1943200">Microscopy and Microanalysis 14(Suppl. 2), 1290-1291 (2008)</A>
# PUBLICATION: 2dx_merge - Data management and merging for 2D crystal images: <A HREF="http://dx.doi.org/10.1016/j.jsb.2007.09.011">J. Struct. Biol. 160(3), 375-384 (2007)</A>
#
# DISPLAY: MergeResolution
# DISPLAY: zstarwin
# DISPLAY: RESMIN
# DISPLAY: RESMAX
# DISPLAY: merge_res_limit
# DISPLAY: merge_reference
# DISPLAY: tempkeep
# DISPLAY: realcell
# DISPLAY: realang
# DISPLAY: ALAT
# DISPLAY: MergeStepSize
# DISPLAY: IBOXPHS
# DISPLAY: SYM
# DISPLAY: avrgamphsNUMBER
# DISPLAY: avrgamphsRESOL
# DISPLAY: MergeIQMAX
# DISPLAY: Merge_Reference_IQMAX
# DISPLAY: MergeHKMAX
# DISPLAY: Merge_Reference_HKMAX
# DISPLAY: ILIST
# DISPLAY: refbeamtilt
# DISPLAY: reftiltgeo
# DISPLAY: merge_reference
# DISPLAY: merge_ref_num
# DISPLAY: merge_comment_1
# DISPLAY: merge_comment_2
# DISPLAY: merge_comment_3
# DISPLAY: merge_comment_4
# DISPLAY: merge_comment_5
# DISPLAY: merge_comment_6
# DISPLAY: merge_comment_7
# DISPLAY: merge_comment_8
# DISPLAY: merge_comment_9
# DIspLAY: merge_alsoevenodd
# DISPLAY: max_amp_correction
# DISPLAY: merge_data_type
# DISPLAY: refine_data_type
# DiSPLAY: RFACAMP
# DISPLAY: Thread_Number
#
#$end_local_vars
#
set bin_2dx = ""
set proc_2dx = ""
#
set create_merged_dataset = ""
set MergeResolution = ""
set zstarwin = ""
set RESMIN = ""
set RESMAX = ""
set merge_res_limit = ""
set tempkeep = ""
set realcell = ""
set realang = ""
set ALAT = ""
set MergeStepSize = ""
set IBOXPHS = ""
set SYM = ""
set avrgamphsNUMBER = ""
set avrgamphsRESOL = ""
set ILIST = ""
set MergeIQMAX = ""
set Merge_Reference_IQMAX = ""
set MergeHKMAX = ""
set Merge_Reference_HKMAX = ""
set refbeamtilt = ""
set reftiltgeo = ""
set merge_reference = ""
set merge_ref_num = ""
set max_amp_correction = ""
set merge_data_type = ""
set merge_alsoevenodd = ""
set refine_data_type = ""
set Reflections_Unique = ""
set num_amplitudes_observed = ""
set num_phases_observed = ""
set num_reflections_fitted = ""
set num_reflections_FOM50 = ""
set overall_R_factor = ""
set overall_phase_residual = ""
set overall_weighted_R_factor = ""
set overall_weighted_phase_residual = ""
set RFACAMP = ""
set Thread_Number = ""
set ctfrev = ""
#
#$end_vars
#
setenv OMP_NUM_THREADS 8
#
set ccp4_setup = 'y'
source ${proc_2dx}/initialize
#
set ITAXASTEP = "1"
set RTAXASIZE = "2.0"
set ITANGLSTEP = "1"
set RTANGLSIZE = "0.5"
#
set split = ($realcell:as/,/ /)
set cellx = $split[1]
set celly = $split[2]
#
echo "cellx = ${cellx}"
echo "celly = ${celly}"
echo "cellz = ${ALAT}"
#
set cellxm1 = `echo ${cellx} | awk '{ s = $1 - 1 } END {print s}'`
set cellym1 = `echo ${celly} | awk '{ s = $1 - 1 } END {print s}'`
set ALATm1 = `echo ${ALAT} | awk '{ s = $1 - 1 } END {print s}'`
#
set dirfile = "2dx_merge_dirfile.dat"
set dirnum = `cat ${dirfile} | wc -l`
set maxthread = `echo ${Thread_Number} ${dirnum} | awk '{if ($1<$2/2) { s = $1 } else { s = int($2 / 2) }} END { print s }'`
if ( ${maxthread} == "0" ) then
  set maxthread = 1
endif
#
set number = 1
if ( ${ILIST} == "n" ) then
  set IVERBOSE = 1
else
  set IVERBOSE = 6
endif
#
set date = `date`
echo date = ${date}
#
set scriptname = 2dx_refine
set merge_modus="3D"
#
\rm -f LOGS/${scriptname}.results
#
if ( ${ILIST}x == 'x' ) then
  set ILIST = "n"
  echo "set ILIST = ${ILIST}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: ILIST corrected to ${ILIST}"
endif
#
if ( ${ILIST} == "n" ) then
  set ILIST_VAL = 0
else
  set ILIST_VAL = 1
endif
#
# The following is to make sure that for the next "Import Images", the default is correctly initialized.
set initialization_reset = "y"
set initialization_executable = "y"
echo "set initialization_reset = ${initialization_reset}" >> LOGS/${scriptname}.results
echo "set initialization_executable = ${initialization_executable}" >> LOGS/${scriptname}.results
#
echo "<<@progress: 1>>"
#
#################################################################################
${proc_2dx}/linblock "Verifying some parameters"
#################################################################################
#
if ( ${merge_alsoevenodd} == "y" && ( ! -e 2dx_merge_dirfile_even.dat || ! -e 2dx_merge_dirfile_odd.dat )) then
  echo ":: "
  echo ":: "
  ${proc_2dx}/linblock "ERROR: First define EVEN and ODD image tags, using the Project Tool"
  ${proc_2dx}/protest "This is the button top left in the GUI"
endif
#
if ( ${refine_data_type}x == 'x' ) then
  set refine_data_type = "0"
  echo "set refine_data_type = ${refine_data_type}" >> LOGS/${scriptname}.results
  ${proc_2dx}/linblock "WARNING: refine_data_type corrected to ${refine_data_type}"
endif
#
if ( ${merge_res_limit}x == 'x' ) then
  echo ":: "
  ${proc_2dx}/linblock "#"
  ${proc_2dx}/linblock "#"
  ${proc_2dx}/linblock "#"
  echo ":: "
  echo ":: "
  ${proc_2dx}/linblock "ERROR: Parameter Database in 2dx_merge is outdated."
  ${proc_2dx}/linblock "Use in 2dx_image the menu function 'Save As Project Default' to update."
  echo ":: "
  echo ":: "
  ${proc_2dx}/linblock "#"
  ${proc_2dx}/protest "Aborting."
endif
#
if ( ${MergeHKMAX}x == 'x' ) then
  set MergeHKMAX = '20'
  ${proc_2dx}/linblock "ERROR: correcting MergeHKMAX to ${MergeHKMAX}"
  echo "set MergeHKMAX = ${MergeHKMAX}" >> LOGS/${scriptname}.results
endif
#
if ( `echo ${RESMIN} ${RESMAX} | awk '{ if ( $1 < $2 ) { s = 1 } else { s = 0 }} END { print s }'` == 1 ) then
  set oldval = ${RESMIN}
  set RESMIN = ${RESMAX}
  set RESMAX = ${oldval}
  ${proc_2dx}/linblock "ERROR: exchanging RESMIN and RESMAX, to RESMIN=${RESMIN}, and RESMAX=${RESMAX}"
  echo "set RESMIN = ${RESMIN}" >> LOGS/${scriptname}.results
  echo "set RESMAX = ${RESMAX}" >> LOGS/${scriptname}.results
endif
#
echo "<<@progress: 5>>"
#
#############################################################################
${proc_2dx}/linblock "Sourcing sym2spsgrp_sub.com"
#############################################################################
#
source ${proc_2dx}/2dx_sym2spcgrp_sub.com
#
echo SYM = ${SYM}
echo spcgrp = ${spcgrp}
echo CCP4_SYM = ${CCP4_SYM}
#
############################################################################# 
${proc_2dx}/lin "2dx_merge_makedirs - to create all required subdirectories"
#############################################################################
#
source ${proc_2dx}/2dx_merge_makedirs
#
echo "<<@progress: 10>"
#
set NPRG = 1
if ( ${merge_reference} == '0' ) then
  # Use merge.aph files
  if ( ! -e APH/merge.aph ) then
    ${proc_2dx}/linblock "ERROR: APH/merge.aph not found. No reference for refinement available."
    ${proc_2dx}/protest "Run Merging script first."
  endif
  if ( ${reftiltgeo} == "y" ) then
    # tilt geometry refinement only possible with refined lattice lines in MTZ data, not with APH data.
    ${proc_2dx}/linblock "ERROR: tilt geometry refinement only possible with refined lattice lines in MTZ file."
    ${proc_2dx}/linblock "ERROR: Conflict between parameter USE MERGED DATA... and REFINE TILTGEOMETRY..."
    ${proc_2dx}/protest "If you want to refine the tilt geometry, switch to MTZ data first."
  endif
  set reference_file="APH/merge.aph"
endif 
if ( ${merge_reference} == '1' ) then
  # Use interpolated lattice lines merge3Dref_MRClefthanded.mtz
  if ( ! -e merge3Dref_MRClefthanded.mtz ) then
    ${proc_2dx}/linblock "ERROR: merge3Dref_MRClefthanded.mtz not found. No reference for refinement available."
    ${proc_2dx}/protest "Run Merging script first."
  endif
  set reference_file="merge3Dref_MRClefthanded.mtz"
  set NPRG = 3
endif
#
if ( ${merge_ref_num} != "0" ) then
  if ( -d REGISTERS/Reg_${merge_ref_num} ) then
     #############################################################################
     ${proc_2dx}/linblock "Using merged dataset from register ${merge_ref_num}."
     #############################################################################  
     echo "::" `cat REGISTERS/Reg_${merge_ref_num}/COMMENT.txt | head -1`
     echo "::" `cat REGISTERS/Reg_${merge_ref_num}/COMMENT.txt | head -2 | tail -1`
     echo " "
    if ( ${NPRG} == "3" ) then
      # Use MTZ file
      if ( ! -e REGISTERS/Reg_${merge_ref_num}/merge3D_MRClefthanded.mtz ) then
        ${proc_2dx}/protest "ERROR: merge3Dref_MRClefthanded.mtz not existing in register ${merge_ref_num}."
      else
        echo ":Copying REGISTERS/Reg_${merge_ref_num}/merge3D_MRClefthanded.mtz ."
        \cp -f REGISTERS/Reg_${merge_ref_num}/merge3D_MRClefthanded.mtz .
      endif
      #
      if ( ! -e REGISTERS/Reg_${merge_ref_num}/merge3Dref_MRClefthanded.mtz ) then
        ${proc_2dx}/protest "ERROR: merge3Dref_MRClefthanded.mtz not existing in register ${merge_ref_num}."
      else
        echo ":Copying REGISTERS/Reg_${merge_ref_num}/merge3Dref_MRClefthanded.mtz ."
        \cp -f REGISTERS/Reg_${merge_ref_num}/merge3Dref_MRClefthanded.mtz .
      endif
    else
      # Use APH file
      if ( ! -e REGISTERS/Reg_${merge_ref_num}/merge2D_MRClefthanded.mtz ) then
        ${proc_2dx}/protest "ERROR: merge2D_MRClefthanded.mtz not existing in register ${merge_ref_num}."
      else
        echo ":Copying REGISTERS/Reg_${merge_ref_num}/merge2D_MRClefthanded.mtz ." 
        \cp -f REGISTERS/Reg_${merge_ref_num}/merge2D_MRClefthanded.mtz .
      endif
      if ( ! -e REGISTERS/Reg_${merge_ref_num}/merge.aph ) then
        ${proc_2dx}/protest "ERROR: merge.aph not existing in register ${merge_ref_num}."
      else
        echo ":Copying REGISTERS/Reg_${merge_ref_num}/merge.aph APH/merge.aph"
        \cp -f REGISTERS/Reg_${merge_ref_num}/merge.aph APH/merge.aph
      endif
    endif
  else
    ${proc_2dx}/protest "ERROR: Register ${merge_ref_num} does not contain data."
  endif
  #
endif
#
set olddir = $PWD
#
#------------------------------------------------------------------------------
echo Test if we are dealing with TILES
# set intiles = `echo ${olddir} | grep -c TILES`
set intiles = 0
echo intiles = ${intiles}

if ( ${intiles} != "1" ) then
  #------------------------------------------------------------------------------
  ${proc_2dx}/linblock "Setting APH file types to use"
  #------------------------------------------------------------------------------ 
  #
  # This translates the list of directories to work on into one single long line:
  cat 2dx_merge_dirfile.dat | tr "\n" " " > SCRATCH/2dx_merge_dirfile_oneline.dat
  set dirlist = "`cat SCRATCH/2dx_merge_dirfile_oneline.dat`"
  #
  #---------------------------------------------------------------------------------------------------
  ${proc_2dx}/linblock "Sourcing ${proc_2dx}/2dx_select_APH.com  ${olddir} ${refine_data_type}"
  #----------------------------------------------------------------------------------------------------
  source ${proc_2dx}/2dx_select_APH.com  ${olddir} ${refine_data_type}
  #
endif
#
if ( ${merge_alsoevenodd} == "y" ) then
  echo ":: "
  #############################################################################
  ${proc_2dx}/linblock "Switching to EVEN IMAGES series"
  #############################################################################
  set dirfile = "2dx_merge_dirfile_even.dat"
  if ( ${merge_reference} == '0' ) then
    set reference_file="APH/merge_even.aph"
  endif 
  if ( ${merge_reference} == '1' ) then
    set reference_file="merge3Dref_MRClefthanded_even.mtz"
  endif  
  #
  ${proc_2dx}/linblock "Sourcing 2dx_origtilt_refine.com"
  source ${proc_2dx}/2dx_origtilt_refine.com
  #
  echo ":: "
  #############################################################################
  ${proc_2dx}/linblock "Switching to ODD IMAGES series"
  #############################################################################
  set dirfile = "2dx_merge_dirfile_odd.dat"
  if ( ${merge_reference} == '0' ) then
    set reference_file="APH/merge_odd.aph"
  endif 
  if ( ${merge_reference} == '1' ) then
    set reference_file="merge3Dref_MRClefthanded_odd.mtz"
  endif
  #
  ${proc_2dx}/linblock "Sourcing 2dx_origtilt_refine.com"
  source ${proc_2dx}/2dx_origtilt_refine.com
  #
else
  set dirfile = "2dx_merge_dirfile.dat"
  if ( ${merge_reference} == '0' ) then
    set reference_file="APH/merge.aph"
  endif 
  if ( ${merge_reference} == '1' ) then
    set reference_file="merge3Dref_MRClefthanded.mtz"
  endif 
  #
  ${proc_2dx}/linblock "Sourcing 2dx_origtilt_refine.com"
  source ${proc_2dx}/2dx_origtilt_refine.com
  #
endif
#
echo "<<@progress: 90>"
#
# Issue evaluate here to reload the Ph-Ori-Change column
# echo "<<@evaluate>>"
#
#############################################################################
${proc_2dx}/linblock "2dx_refine normal end."
#############################################################################
#
echo "<<@progress: 100>>"
#
exit
#FOR GUI:

